import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import axios from 'axios';
import {Inputs, FormState} from '../../types';
import {RootState} from '../store';

// {name: , price: , categories: }
const initialState: FormState = {
  inputs: {
    categories: [],
    description: '',
    colors: [],
    name: '',
    picture: '',
    price: 0,
    rating: 0,
    size: '',
    stock: 0,
  },
  status: 'idle',
};



export const sendFormAsync = createAsyncThunk(
    'formReducer/sendFormAsync',
    async (form: Inputs) => {
      const res = await axios.post(`http://localhost:3001/product/`);
      return res.data;

    },
);

export const formSlice = createSlice({ // Te creo al reducer, acciones y estados
  name: 'form',
  initialState, // Le pasas el estado inicial
  reducers: {
    // AcÃ¡ metes tus acciones normales de toda la vida
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
        .addCase(sendFormAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(sendFormAsync.fulfilled, (
            state,
            action: PayloadAction<Inputs>) => {
          state.inputs = action.payload;
          state.status = 'idle';
        })
        .addCase(sendFormAsync.rejected, (state) => {
          state.status = 'failed';
        });
  },
});

export const inputs = (state: RootState) => state.formReducer.inputs;

export default formSlice.reducer;
