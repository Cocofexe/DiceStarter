import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import {ToDelete} from '../../types';
import {RootState} from '../store';

const initialState: ToDelete = {/* Acá definanse un Type en types.ts*/
  id: 0,
  status: 'idle',
};

export const deleteByIdAsync = createAsyncThunk(
    'handleGamesReducer/deleteById',
    async (id: number) => {
      const response = new Promise((resolve, reject) => {
        if (id) {
          setTimeout(() => resolve(id), 2000);
        } else {
          setTimeout(() => reject(new Error('Error')), 2000);
        }
      });
      return response;
    },
);

export const handleGamesSlice = createSlice({
  // Te creo al reducer, acciones y estados
  name: 'handleGamesReducer',
  initialState, // Le pasas el estado inicial
  reducers: {
    // Acá metes tus acciones normales de toda la vida
    setGameIdToDelete: (state, action : PayloadAction<number>) => {
      state.id = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
        .addCase(deleteByIdAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(deleteByIdAsync.fulfilled, (state, action:any) => {
          state.status = 'idle';
        })
        .addCase(deleteByIdAsync.rejected, (state) => {
          state.status = 'failed';
        });
  },
});

export const {setGameIdToDelete} = handleGamesSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example:
// `useSelector((state: RootState) => state.counter.value)`
export const id = (state: RootState) => state.handleGamesReducer.id;

export default handleGamesSlice.reducer;
